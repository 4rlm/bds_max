##### KILL Process Signal List ####
$ Signal.list
# Process.kill(9, Process.ppid)
# Process.kill(9, Process.pid)
# Process.kill("TERM", ppid)
# Process.kill("QUIT", Process.pid)

######### HIGHLIGHTS #########
$ foreman start
$ tail -f log/development.log
$ rails c #=> StafferService.new.cs_starter
$ rails c #=> paste query.count

Ex:
# IndexerService.new.url_redirect_starter
# StafferService.new.cs_starter

#### Gem Install ###
Link: http://bundler.io/v1.5/groups.html

$ bundle install --without test development
$ bundle install --without production

$ bundle install --with test development
$ bundle install --with production

$ bundle check
$ bundle update


######### Bash Aliases #########
# My Custom Aliases bash_profile
alias be="bundle exec"
alias co="checkout"
alias killall="killall 'foreman: master'"

#################
staffers = Staffer.where(cont_source: "Web", scrape_date: nil).count
staffers.each {|staffer| staffer.update_attributes(scrape_date: staffer.created_at) }

########## Runner Scripts ############
# $ rails runner db/scripts/staffer_address_migrator.rb
# $ heroku run rails runner db/scripts/staffer_address_migrator.rb --app bds-max
######################
# $ rails runner db/scripts/staffer_scrape_date_migrator.rb
# $ heroku run rails runner db/scripts/staffer_scrape_date_migrator.rb --app bds-max
#######################################


######### Adam Git Express! #########
$ git commit -am "comment"
$ git push origin (create pr on gh, but don't merge)
$ git checkout master
$ git merge feature
$ git push heroku-production

##### command line - local
$ tail -f log/development.log
$ bundle exec puma


$!!! git force/pull/push if don't like changes.
$ git hist -number
$ git log -2
$ git log master -2

######### Adam Heroku Express! #########
$ heroku logs -t --app bds-max
$ heroku run rails c --app bds-max
$ heroku ps --app bds-max
$ heroku run rake db:migrate --app bds-max
$ heroku ps:restart --app bds-max


$ heroku config:set DB_POOL=10

######### Foreman #########
$ killall "foreman: master"

######### Delayed Job #########
$ rake jobs:clear
$ heroku run rake jobs:clear --app bds-max

######### Database Connections #########
$ bundle exec rails dbconsole
select count(*) from pg_stat_activity where pid <> pg_backend_pid() and usename = current_user;

/Users/Adam/Desktop/MaxDigital/bds_max/config/database.yml:
# production:
#   url:  <%= ENV["DATABASE_URL"] %>
#   pool: <%= ENV["DB_POOL"] || ENV['RAILS_MAX_THREADS'] || 10 %>

#### Procfile ###
web:  bundle exec puma  -t 0:5 -p $PORT -e ${RACK_ENV:-development}
worker: RAILS_MAX_THREADS=${SIDEKIQ_RAILS_MAX_THREADS:-25} bundle exec sidekiq

heroku config:set SIDEKIQ_RAILS_MAX_THREADS=25

==========================================



I. ################# DETAILED GIT-HEROKU WORKFLOW ############
<Create feature branch from staging>
$ git checkout -b feature-branch    << MAKE SURE CURRENT BRANCH IS STAGING!

<push feature branch to staging>
$ git push origin staging-feature-branch
>> Then merge it to staging branch, not master branch
>> Back to local,
	$ git checkout staging
	$ git pull origin staging
	$ git branch -D staging-feature-branch

<push merged staging branch to heorku-staging app>
$ git push heroku-staging staging:master

==========================================
<push your staging branch to master>
$ git push origin master << MAKE SURE CURRENT BRANCH IS STAGING!
>> Then merge it to master branch, not staging branch
>> Back to local, $ git pull origin master to your MASTER

<push merged master branch to heroku-production app>
$ git push heroku-production master << MAKE SURE CURRENT BRANCH IS MASTER!


III. ################# HEROKU COMMAND LINE ############

Kill Workers:
	$ heroku ps:stop worker --app bds-max
	$ heroku ps:stop run.1
	$ heroku ps:stop worker
	$ heroku ps:workers 0
	$ heroku scale worker=0
	$ heroku ps:scale worker=0

Restart App/Workers:
	$ run heroku restart
	$ heroku ps:restart
	$ heroku ps:scale worker=1


IV. ################# Unix Process Model ############
1. * Applying the Unix Process Model to Web Apps  - Heroku
http://adam.herokuapp.com/past/2011/5/9/applying_the_unix_process_model_to_web_apps/

2. resque-scheduler
https://github.com/resque/resque-scheduler#readme

3. Worker Dynos, Background Jobs and Queueing
https://devcenter.heroku.com/articles/background-jobs-queueing

4. Foreman - RailsCasts #281 Foreman
http://railscasts.com/episodes/281-foreman

5. Resque - RailsCasts #271 Resque
http://railscasts.com/episodes/271-resque

6. Runtime Principles - Heroku
https://devcenter.heroku.com/articles/runtime-principles#process-model

7. Optimizing Dyno Usage - Heroku

V. ################# Delayed Jobs Schema ############

$ rails c
$ Delayed::Job.all
$ Delayed::Job.last

create_table "delayed_jobs", force: :cascade do |t|
	t.integer  "priority",   default: 0, null: false
	t.integer  "attempts",   default: 0, null: false
	t.text     "handler",                null: false
	t.text     "last_error"
	t.datetime "run_at"
	t.datetime "locked_at"
	t.datetime "failed_at"
	t.string   "locked_by"
	t.string   "queue"
	t.datetime "created_at"
	t.datetime "updated_at"
	t.index ["priority", "run_at"], name: "delayed_jobs_priority", using: :btree
end



######## FOREMAN ##########
$ atom Procfile
$ foreman check
$ foreman start
$ foreman start faye
$ foreman start -c worker=4
$ foreman export upstart .

web: bundle exec rails server -p $PORT
worker: bundle exec foreman start -f Procfile.workers


worker:  bundle exec rake jobs:work
web: bundle exec thin start
job: bundle exec rake jobs:work

Foreman & Procfile links:
https://github.com/ddollar/foreman
https://devcenter.heroku.com/articles/procfile
http://railscasts.com/episodes/281-foreman
* https://stackoverflow.com/questions/21566721/parallel-background-tasks-on-single-worker-dyno
https://stackoverflow.com/questions/21566721/parallel-background-tasks-on-single-worker-dyno/21568770#21568770
https://stackoverflow.com/questions/18176043/does-anyone-run-more-than-one-resque-worker-in-a-heroku-dyno/19764369#19764369

https://devcenter.heroku.com/articles/heroku-local
http://blog.daviddollar.org/2011/05/06/introducing-foreman.html


https://github.com/tobi/delayed_job

*** AWESOME ARTICLE ON DELAYED JOBS BEST PRACTICES ***
https://www.sitepoint.com/delayed-jobs-best-practices/






########## Procfile Testing Notes ##########

web: bundle exec rails server -p $PORT
worker: bundle exec foreman start -f Procfile.workers


web:  bundle exec puma  -t 0:20 -p $PORT -e ${RACK_ENV:-development}
worker: RAILS_MAX_THREADS=${SIDEKIQ_RAILS_MAX_THREADS:-25} bundle exec sidekiq


#### Made changes on:
/Users/Adam/Desktop/MaxDigital/bds_max/config/puma.rb
/Users/Adam/Desktop/MaxDigital/bds_max/config/database.yml
/Users/Adam/Desktop/MaxDigital/bds_max/Procfile



############### Rainbow ##############

require 'rainbow'
puts Rainbow("even bright underlined!").yellow.underline.bright

def colored(string)
  indicator = Rainbow("!=>>").yellow.bright
  main = Rainbow(string).yellow.underline.bright
  "\n\n#{indicator} #{main}\n"
end

puts colored("happy_string")



Good DJ Articles: http://bica.co/2015/03/08/howto-using-activejob-with-delayedjob/
$ rails generate job test_job
$ bundle exec rake jobs:work
$ rails runner "TestJob.perform_later(1,2,3)"

$ rails generate job sample #=> app/jobs/sample_job.rb
$ rails runner "SampleJob.perform_later(1,2,3)"
$ rails runner "SampleJob.perform_later"



#########################################
$ rails runner "SampleJob.perform_later"
$ rails runner "SampleJob.perform_later('Adam')"
# bds_max/app/jobs/sample_job.rb
#########################################
$ rails generate job sample #=> app/jobs/sample_job.rb
$ rails generate job StafferScrapeDateMigrator #=> app/jobs/staffer_scrape_date_migrator_job.rb
$ rails runner "StafferScrapeDateMigratorJob.perform_later"
############################################
$ rails runner "GuestsCleanupJob"
############################################

$ rails runner "GuestsCleanupJob"



rails runner db/scripts/staffer_scrape_date_migrator.rb
rails runner app/jobs/staffer_scrape_date_migrator_job.rb

###################
$ rails runner "NewsletterJob.perform_later"
newsletter_job.rb


######### Delayed Job #########
$ rake jobs:clear
$ killall "foreman: master"

###############

RAILS_ENV=production script/delayed_job restart

app/jobs/staffer_scrape_date_migrator_job.rb

RAILS_ENV=development script/delayed_job start

RAILS_ENV=development app/jobs/staffer_scrape_date_migrator_job.rb/delayed_job start

app/jobs/staffer_scrape_date_migrator_job.rb/delayed_job: Not a directory


bin/delayed_job



important - save below

worker: bundle exec foreman start -f Procfile.workers

########## Procfile #############
web: bundle exec rails server -p $PORT
worker: bundle exec foreman start -f Procfile.workers
worker: RAILS_MAX_THREADS=${SIDEKIQ_RAILS_MAX_THREADS:-25} bundle exec sidekiq
worker: bundle exec sidekiq -C config/sidekiq.yml

/Users/Adam/Desktop/MaxDigital/bds_max/config/sidekiq.yml
/Users/Adam/Desktop/MaxDigital/bds_max/config/puma.rb
/Users/Adam/Desktop/MaxDigital/bds_max/config/database.yml


############ Sidekiq ###########
$ redis-server /usr/local/etc/redis.conf #=> starts redis server
$ bundle exec sidekiq  #=> starts sidekiq

Sidekiq: 500 Records updated in 20 sec
Delayed: 500 Records updated in 18 sec

Sidekiq: 4000 Records updated in 154.5 sec
Delayed: 4000 Records updated in 135.6 sec


######## Environment Variables ########
== In IRB: ==

Rails.env

Rails.env.development?
Rails.env.test?
Rails.env.production?
Rails.env.your_custom_environment?

Rails.env

#########

can enter: Delayed::Worker.read_ahead

######
ENV["MARCO"] #=> nil
ENV["MARCO"] = "polo" #=> polo
'echo $MARCO' #=> "polo\n"

#####
ENV['RAILS_ENV'] is now deprecated, should use:
Rails.env

###############



#### delayed_job_worker_pool ####
# https://github.com/salsify/delayed_job_worker_pool
# https://www.salsify.com/blog/engineering/delayed-job-worker-pooling


###### Load Ruby Rails File in CLI ####
# Link: https://stackoverflow.com/questions/10313181/pass-ruby-script-file-to-rails-console

# in rails c

# bundle exec rails runner "eval(File.read 'your_script.rb')"

# load './path/to/foo.rb'

################ Progress ##############
bundle exec tail -f log/development.log
tail -f log/development.log

# $ rails runner "PoolingGemJob.perform_later"/delayed_job start
# $ bin/rails runner jobs/pooling_gem_job.rb

# bin/delayed_job start
# bin/delayed_job -n 4 start
# bin/delayed_job stop
# rails runner "PoolingGemJob.perform_later"

PoolingGemJob.new.perform
PoolingGem.new.pooling_gem_starter

rails runner "Staffer.run_dj"
StaffersController.run_dj

testing = StaffersController.new
testing.run_dj

StaffersController.new.run_dj
StafferService.new.run_dj_service

StafferService.new.cs_starter

GeneralService.new.cs_starter


####### grep #########
$ grep -w "boo" file #=> search words only
$ egrep -w 'word1|word2' /path/to/file #=> search 2 different words
